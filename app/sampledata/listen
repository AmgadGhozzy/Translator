 private final ActivityResultLauncher<Intent> speechLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
        ArrayList<String> matches = result.getData().getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
        new Speech(MainActivity.this, matches.get(0));
    });

    private void listen() {
        Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        i.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        i.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        i.putExtra(RecognizerIntent.EXTRA_PROMPT, "Say Something...");
        speechLauncher.launch(i);
    }

    listen();


     private void startSpeechToText() {
                     Intent i = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
                     i.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
                     i.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
                     i.putExtra(RecognizerIntent.EXTRA_PROMPT, "Say Something...");
                     startActivityForResult(i, 100);
                 }
                 @Override
                 protected void onActivityResult(int requestCode, int resultCode, Intent data) {
                     super.onActivityResult(requestCode, resultCode, data);
                     ArrayList<String> spe = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                     new Speech(MainActivity.this, spe.get(0));
                 }






                     private ScrollView scrollView;

                     @Override
                     protected void onCreate(Bundle savedInstanceState) {
                         super.onCreate(savedInstanceState);
                         setContentView(R.layout.activity_main);

                         scrollView = findViewById(R.id.ScrollText);

                         scrollView.setOnTouchListener(new View.OnTouchListener() {
                             float startX;

                             @Override
                             public boolean onTouch(View v, MotionEvent event) {
                                 switch (event.getAction()) {
                                     case MotionEvent.ACTION_DOWN:
                                         startX = event.getX();
                                         break;
                                     case MotionEvent.ACTION_UP:
                                         float endX = event.getX();
                                         float deltaX = endX - startX;
                                         if (Math.abs(deltaX) > 100) { // Adjust this threshold as needed
                                             if (deltaX < 0) {
                                                 // Swiped left
                                                 Toast.makeText(MainActivity.this, "Swiped left", Toast.LENGTH_SHORT).show();
                                             } else {
                                                 // Swiped right
                                                 Toast.makeText(MainActivity.this, "Swiped right", Toast.LENGTH_SHORT).show();
                                             }
                                         }
                                         break;
                                 }
                                 return true;
                             }
                         });
                     }
                 }





import androidx.preference.PreferenceManager.getDefaultSharedPreferences


    @SuppressLint("ClickableViewAccessibility")
    override fun onCreate(savedInstanceState: Bundle?) {
        if (getDefaultSharedPreferences(applicationContext).getBoolean("light_theme", false)) {
            setTheme(R.style.AppTheme_Light)
        } else {
            setTheme(R.style.AppTheme_Dark)
        }
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main_trans)



        val sharedPreference: SharedPreferences = getDefaultSharedPreferences(applicationContext)
        val sharedEditor = sharedPreference.edit()
        dictionarySwitch.setOnCheckedChangeListener { buttonView: CompoundButton?, isChecked: Boolean ->

            if (isChecked) {
                sharedEditor.putBoolean("trans_dictionary", true).apply()
            } else {
                sharedEditor.putBoolean("trans_dictionary", false).apply()
            }
        }
        isDictionary =
            getDefaultSharedPreferences(applicationContext).getBoolean("trans_in_dialog", true)
        dictionarySwitch.setChecked(isDictionary)


    private fun Translate() {
        val targetLang =
            getResources().getStringArray(R.array.LangCodeArray)[findViewById<Spinner>(R.id.spinner_to_language).selectedItemPosition]
        val text = Objects.requireNonNull(textInputEditText.getText()).toString()
        var translated: String? = null
        if (isDictionary) {
            dictionary(text, targetLang) { wordMeanings: String? ->
                translated = wordMeanings
            }
        } else {
            translate(text, targetLang) { translatedText: String? ->
                translated = translatedText
            }

        }
